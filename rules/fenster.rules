var String OffeneFenster = ""

rule "FensterOffen"
	when
		Item gFenster received update // NOTE: the rule will trigger multiple times per event
	then
		Thread::sleep(500) // give persistence time to catch up

		if (gFenster.members.filter(s|s.state==OPEN).size == 0) {
			OffeneFenster = "Keine  "
		} else {
			OffeneFenster = ""			
		}

		//Wohnzimmerfenster checken
		if (FensterWohnzimmer.state == OPEN) {
			OffeneFenster = OffeneFenster + "Wohnzimmer ,"
			logInfo("Offene Fenster","Added Wohnzimmer " + OffeneFenster)
		}
		//Küchenfenster links checken
		if (FensterKuecheLinks.state == OPEN) {
			OffeneFenster = OffeneFenster + "Küche ,"
			logInfo("Offene Fenster","Added Küche " + OffeneFenster)
		}
		//Küchenfenster rechts checken
		if (FensterKuecheRechts.state == OPEN) {
			if (!OffeneFenster.contains("Küche")) {
				OffeneFenster = OffeneFenster + "Küche ,"
				logInfo("Offene Fenster","Added Küche " + OffeneFenster)
			}
		}
		//Ankleide checken
		if (FensterAnkleide.state == OPEN) {
			OffeneFenster = OffeneFenster + "Ankleide ,"
			logInfo("Offene Fenster","Added Ankleidezimmer " + OffeneFenster)
		}
		//Badezimmer checken
		if (FensterBadezimmer.state == OPEN) {
			OffeneFenster = OffeneFenster + "Bad ,"
			logInfo("Offene Fenster","Added Badezimmer " + OffeneFenster)
		}
		//Dachzimmer checken
		if (FensterDachzimmer.state == OPEN) {
			OffeneFenster = OffeneFenster + "Dach ,"
			logInfo("Offene Fenster","Added Dachzimmer " + OffeneFenster)
		}
		//Kinderzimmer checken
		if (FensterKinderzimmer.state == OPEN) {
			OffeneFenster = OffeneFenster + "Kinder ,"
			logInfo("Offene Fenster","Added Kinderzimmer " + OffeneFenster)
		}
		//Schlafzimmer links checken
		if (FensterSchlafzimmerLinks.state == OPEN) {
			OffeneFenster = OffeneFenster + "Schlafzimmer ,"
			logInfo("Offene Fenster","Added Schlafzimmer " + OffeneFenster)
		}
		//Schlafzimmer rechts checken
		if (FensterSchlafzimmerRechts.state == OPEN) {
			if (!OffeneFenster.contains("Schlafzimmer")){
				OffeneFenster = OffeneFenster + "Schlafzimmer ,"
				logInfo("Offene Fenster","Added Schlafzimmer " + OffeneFenster)
			}
		}
		
		NameOffeneFenster.postUpdate(OffeneFenster.substring(0, OffeneFenster.length-2))
		
	end
	
rule "Es regnet"
    when
    	Item EsRegnet changed to ON
    then
    	logInfo("Fenster","Es regnet, Fenster prüfen")
    	
			//Wohnzimmerfenster checken
			if (FensterWohnzimmer.state == OPEN) {
				sendTelegram("bot2", "Es regnet und die Terassentür im Wohnzimmer ist offen")
			}
			//Küchenfenster links checken
			if (FensterKuecheLinks.state == OPEN) {
				sendTelegram("bot2", "Es regnet und ein Fenster in der Küche ist offen")
			}
			//Küchenfenster rechts checken
			if (FensterKuecheRechts.state == OPEN) {
				sendTelegram("bot2", "Es regnet und ein Fenster in der Küche ist offen")
			}
			//Ankleide checken
			if (FensterAnkleide.state == OPEN) {
				sendTelegram("bot2", "Es regnet und das Fenster in der Ankleide ist offen")
			}
			//Badezimmer checken
			if (FensterBadezimmer.state == OPEN) {
				sendTelegram("bot2", "Es regnet und das Fenster im Badezimmer ist offen")
			}
			//Dachzimmer checken
			if (FensterDachzimmer.state == OPEN) {
				sendTelegram("bot2", "Es regnet und das Fenster im Dachzimmer ist offen")
			}
			//Kinderzimmer checken
			if (FensterKinderzimmer.state == OPEN) {
				sendTelegram("bot2", "Es regnet und das Fenster im Kinderzimmer ist offen")
			}
			//Schlafzimmer links checken
			if (FensterSchlafzimmerLinks.state == OPEN) {
				sendTelegram("bot2", "Es regnet und ein Fenster im Schlafzimmer ist offen")
			}
			//Küchenfenster rechts checken
			if (FensterSchlafzimmerRechts.state == OPEN) {
				sendTelegram("bot2", "Es regnet und ein Fenster im Schlafzimmer ist offen")
			}
	end

rule "FensterGeschlossen"
	when
		Item gFenster received update // NOTE: the rule will trigger multiple times per event
	then
		Thread::sleep(500) // give persistence time to catch up
		val AnzahlFenster = gFenster.members.filter(s|s.state==OPEN).size
		AnzahlOffeneFenster.postUpdate(AnzahlFenster)
	end
